local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Mapple V4",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Mapple V4",
   LoadingSubtitle = "Universal Script üìå",
   Theme = "Serenity", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Mapple V4 | Key",
      Subtitle = "Powered By Rayfield",
      Note = "", -- Use this to tell the user how to get a key
      FileName = "MV4_KEY", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://raw.githubusercontent.com/Maz0224/MappleV4/refs/heads/main/key"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

--STRINGS--
getgenv().TPPlace = "string"

--BOOLS--
_G.autoeat = true
_G.autograb = true

--FUNCTIONS--
function Teleport(teleportPlace)
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = teleportPlace
    else
        warn("Teleport failed: HumanoidRootPart not found.")
    end
end
----------
function AutoEat()
    while _G.autoeat == true do
        local args = {
    [1] = workspace:WaitForChild(game.Players.LocalPlayer.Name, 9e9):WaitForChild("Events", 9e9):WaitForChild("Eat", 9e9);
}
workspace:WaitForChild(game.Players.LocalPlayer.Name, 9e9):WaitForChild("Events", 9e9):WaitForChild("Eat", 9e9):FireServer(unpack(args))
        wait(0.0000001)
    end
end
----------
function AutoGrab()
    while _G.autograb == true do
        local args = {
    [1] = workspace:WaitForChild(game.Players.LocalPlayer.Name, 9e9):WaitForChild("Events", 9e9):WaitForChild("Grab", 9e9);
    [2] = false;
    [3] = false;
}

workspace:WaitForChild(game.Players.LocalPlayer.Name, 9e9):WaitForChild("Events", 9e9):WaitForChild("Grab", 9e9):FireServer(unpack(args))
        wait(2.8)
    end
end

--HomeTab--
local HomeTab = Window:CreateTab("Home üè†", nil) -- Title, Image

local Section = HomeTab:CreateSection("Player")

local Slider = HomeTab:CreateSlider({
   Name = "Player Speed",
   Range = {0, 499},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 36,
   Flag = "Slider1", 
   Callback = function(Value)
 game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
   end,
})

local Slider = HomeTab:CreateSlider({
   Name = "Player Jump",
   Range = {0, 499},
   Increment = 1,
   Suffix = "Jump",
   CurrentValue = 50,
   Flag = "Slider2", 
   Callback = function(Value)
 game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
   end,
})

local Section = HomeTab:CreateSection("Misc")

local Button = HomeTab:CreateButton({
   Name = "Destroy GUI",
   Callback = function()
        Rayfield:Destroy()
   end,
})

--Blocks n' Props--
local JengaTab = Window:CreateTab("Jenga üéÆ", nil) -- Title, Image
local Section = JengaTab:CreateSection("Players")

local Button = JengaTab:CreateButton({
   Name = "Instant Win (Tower)",
   Callback = function()
    Teleport(game:GetService("Workspace").Map.Classic.Button.CFrame)
   end,
})

local Button = JengaTab:CreateButton({
   Name = "Teleport To Shooter",
   Callback = function()
    Teleport(game:GetService("Workspace").Map.Classic.Shooter.PARTSPAWNAREA.CFrame)
   end,
})

local Button = JengaTab:CreateButton({
   Name = "Tower Transparency 0.5",
   Callback = function()
       local tower = game.Workspace:FindFirstChild("Map") and game.Workspace.Map:FindFirstChild("Classic") and game.Workspace.Map.Classic:FindFirstChild("Tower")
       if tower then
           for _, part in ipairs(tower:GetDescendants()) do
               if part:IsA("BasePart") and part.Name:match("^JengaPart") then
                   part.Transparency = 0.5
               end
           end
       else
           warn("Tower not found!")
       end
   end,
})

--Eat The World--
local EatTWTab = Window:CreateTab("Eat The World üéÆ", nil) -- Title, Image
local Section = EatTWTab:CreateSection("Auto...")

local Toggle = EatTWTab:CreateToggle({
   Name = "Auto Eat",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        _G.autoeat = Value
            AutoEat()
   end,
})

local Toggle = EatTWTab:CreateToggle({
   Name = "Auto Grab",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        _G.autograb = Value
            AutoGrab()
   end,
})
